from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from contextlib import suppress
from aiogram.utils.exceptions import MessageNotModified
import uuid
from dotenv import load


import os

from keyboards import *
from utils import *


load()

storage = MemoryStorage()
bot = Bot(token=os.getenv('TOKEN'), parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot=bot, storage=storage)


NAME_BOT = 'DemonstrationWorkBot'
ADMIN_CHAT = os.getenv('ADMIN_CHAT_ID')


class StateUsersData(StatesGroup):
    Calculate_RUB_BTC = State()
    RewievState = State()
    BuyMONERO = State()


class BuyMonero(StatesGroup):
    inputMonero = State()
    inputChangePay = State()
    inputMoneroWallet = State()
    finalMonero = State()


class BuyBTC(StatesGroup):
    inputBTC = State()
    inputChangePay = State()
    inputBTCWallet = State()
    finalBTC = State()


class BuyUSDT(StatesGroup):
    inputUSDT = State()
    inputChangePay = State()
    inputUSDTWallet = State()
    finalUSDT = State()


async def edit_text_message(message: types.Message, text: str, keyboard):
    with suppress(MessageNotModified):
        await message.edit_text(text, reply_markup=keyboard)


@dp.message_handler(commands=['start'], state='*')
async def command_start_process(message: types.Message, state: FSMContext):
    await state.finish()
    if message.text[7:]:
        # –∫—É–¥–∞ —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—Ä–Ω–µ—Ä—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        pass
    text = START_TEXT
    await message.answer(text, reply_markup=get_keyboard_start_menu())


@dp.message_handler(Text(equals=[BACK_TO_START_BUT, BACK_TO_START_BUT_MIND]), state='*')
async def command_back_to_start(message: types.Message, state: FSMContext):
    await state.finish()
    await message.delete()
    text = START_TEXT
    await message.answer(text, reply_markup=get_keyboard_start_menu())


@dp.message_handler(Text(equals=START_BUT7))
async def command_referal_process(message: types.Message):
    # –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
    # –¥–æ–±–∞–≤–∏—Ç—å user_id 
    text = f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ <b>0</b> —á–µ–ª–æ–≤–µ–∫\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n\n<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</b>\n\n<code>https://t.me/{NAME_BOT}?start=11111111</code>"
    await message.answer(text, reply_markup=get_keyboard_back_to_start())


@dp.message_handler(Text(equals=START_BUT6))
async def command_faq_process(message: types.Message):
    text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º"
    await message.answer(text, reply_markup=get_keyboard_back_to_start())


@dp.message_handler(Text(equals=START_BUT3))
async def command_about_process(message: types.Message):
    text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ\n–ö–∞–∫–∏–µ —Ç–æ —Å—Å—ã–ª–∫–∏ –∏ —Ç–¥."
    await message.answer(text, reply_markup=get_keyboard_back_to_start())


# –†–ê–ó–î–ï–õ –° –û–¢–ó–´–í–ê–ú–ò

@dp.message_handler(Text(equals=START_BUT5))
async def command_rewiev_process(message: types.Message, state: FSMContext):
    text = "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –æ—Ç–∑—ã–≤"
    await message.answer(text, reply_markup=get_keyboard_back_to_start())
    await state.set_state(StateUsersData.RewievState.state)


@dp.message_handler(state=StateUsersData.RewievState)
async def ckeck_rewiev(message: types.Message, state: FSMContext):
    rewiev = message.text
    print(rewiev)
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–∑—ã–≤ –∫—É–¥–∞ —Ç–æ
    text = "–°–ø–∞—Å–∏–±–æ, –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"
    await message.answer(text, reply_markup=get_keyboard_back_to_start())
    await state.finish()

# –ö–û–ù–ï–¶ –†–ê–ó–î–ï–õ–ê –° –û–¢–ó–´–í–ê–ú–ò

# –†–ê–ó–î–ï–õ –° –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–û–ú –í–ê–õ–Æ–¢

@dp.message_handler(Text(equals=START_BUT4))
async def command_calculate_process(message: types.Message):
    text = f"–í—ã–±–µ—Ä–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    await message.answer(text, reply_markup=get_keyboard_calculate())


@dp.message_handler(Text(equals=RUB_MONERO))
async def command_calculate_rub_monero_process(message: types.Message, state: FSMContext):
    text = f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö"
    await state.set_state(StateUsersData.Calculate_RUB_BTC.state)
    await message.answer(text, reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state=StateUsersData.Calculate_RUB_BTC)
async def check_rub_monero(message: types.Message, state: FSMContext):
    rub: str = message.text
    if rub.isdigit():
        btc = "0.0123"
        # —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä—É–±–ª–µ–π –≤ –±–∏—Ç–∫–æ–∏–Ω—ã
        text = f"{rub} —Ä—É–±–ª–µ–π —ç—Ç–æ {btc} BTC"
        await message.answer(text, reply_markup=get_keyboard_calculate_repeat_or_start())
        await state.finish()
    else:
        text = f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n\n<i>–ü—Ä–∏–º–µ—Ä:</i> 20000"
        await message.answer(text, reply_markup=ReplyKeyboardRemove())


@dp.message_handler(Text(equals=REPEAT_CALCULATE))
async def command_repeat_calculate(message: types.Message, state: FSMContext):
    await message.delete()
    text = f"–í—ã–±–µ—Ä–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    await message.answer(text, reply_markup=get_keyboard_calculate())


# –ö–û–ù–ï–¶ –†–ê–ó–î–ï–õ–ê –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê –í–ê–õ–Æ–¢

# –†–ê–ó–î–ï–õ –° –ü–û–ö–£–ü–ö–û–ô –í–ê–õ–Æ–¢–´

@dp.message_handler(Text(equals=START_BUT1))
async def command_buy_process(message: types.Message):
    text = "–í—ã–±–µ—Ä–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å"
    await message.answer(text, reply_markup=get_keyboard_buy())


@dp.message_handler(Text(equals=MONERO))
async def command_buy_monero_process(message: types.Message, state: FSMContext):
    # –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —É–∑–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞

    text = f"""üìà –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å 
1 MONERO = 2304720 —Ä—É–± + 50 —Ä—É–±

–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å MONERO? 
–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
–≤ —Ñ–æ—Ä–º–∞—Ç–µ X.–•–•–•–•
 
 <i>–ü—Ä–∏–º–µ—Ä:</i>  0.055"""

    await message.answer(text, reply_markup=get_keyboard_back_to_start())
    await state.set_state(BuyMonero.inputMonero.state)


@dp.message_handler(state=BuyMonero.inputMonero)
async def check_rub_monero(message: types.Message, state: FSMContext):
    monero: float = message.text
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –•.–•–•–•–•
    # –ø—Ä–≤–æ–µ—Ä–∫–∞ —á—Ç–æ –≤ –±–∞–Ω–∫–µ –µ—Å—Ç—å —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥
    print(monero)
    await state.update_data(type_coin=MONERO, count=monero) # –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ data
    text = "–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"
    await message.answer(text, reply_markup=get_keyboard_change_pay())
    await BuyMonero.next()


@dp.message_handler(state=BuyMonero.inputChangePay)
async def check_rub_monero_change_pay(message: types.Message, state: FSMContext):
    change_pay = message.text
    await state.update_data(change_pay=change_pay) # –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ data
    text = "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è"
    await message.answer(text, reply_markup=ReplyKeyboardRemove())
    await BuyMonero.next()


@dp.message_handler(state=BuyMonero.inputMoneroWallet)
async def check_rub_monero_wallet(message: types.Message, state: FSMContext):
    wallet: str = message.text
    print(len(wallet))
    if len(wallet) > 80 and wallet.startswith(('4', '8', 4, 8)):
        await state.update_data(wallet=wallet) # –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ data
        user_data = await state.get_data()
        count_rub = 10000
        number_card = user_data['change_pay'] # –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã—Ç—è–≥–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –ø–æ –∫–ª—é—á—É change_pay
        text = f"""<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 20 –º–∏–Ω—É—Ç</b>

–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–µ–≤–æ–¥
–Ω–∞ –∫–∞—Ä—Ç—É: <code>{number_card}</code>

<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</i>

–ù–∞ —Å—É–º–º—É: <code>{count_rub}</code>
–í–∞–º –∑–∞—á–∏—Å–ª–∏—Ç—å—Å—è: {user_data['count']} {user_data['type_coin']}

–¢–µ–∫—Å—Ç.
        """
        await message.answer(text, reply_markup=get_keyboard_buy_final())
        await BuyMonero.next()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞', reply_markup=get_keyboard_back_to_start())



@dp.message_handler(Text(equals=BUY_FINAL), state=BuyMonero.finalMonero)
async def check_rub_monero_wallet_final(message: types.Message, state: FSMContext):
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    
    user_data = await state.get_data()

    type_coint = user_data['type_coin']
    count = user_data['count']
    wallet = user_data['wallet']
    change_pay = user_data['change_pay']

    order = f"""–ó–∞—è–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
–ï–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {type_coint}
–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {count}
–ù–∞ –∫–æ—à–µ–ª–µ–∫: <code>{wallet}</code>

–û–Ω –ø—Ä–∏—Å–ª–∞–ª 10000 —Ä—É–±
–°–ø—Å–æ–± –æ–ø–ª–∞—Ç—ã {change_pay}
    """
    label = uuid.uuid4()
    await bot.send_message(chat_id=ADMIN_CHAT, text=order, reply_markup=get_keyboard_channel_yes_no(label))
    text = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω –ø—Ä–∏–Ω—è—Ç–∞\n–û–∂–∏–¥–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 20 –º–∏–Ω—É—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ"
    await message.answer(text, reply_markup=get_keyboard_back_to_start_mind())
    await state.finish()


# –ö–û–ù–ï–¶ –†–ê–ó–î–ï–õ–ê

@dp.callback_query_handler(Text(startswith='order_'))
async def callback_order_check_or_cancel(callback: types.Message):
    print(callback.data)
    if str(callback.data).startswith('order_check_'):
        order_id = callback.data.split('_')[-1]
        # —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ 1
        print(order_id)
        text = callback.message.text + '\n\n‚úÖ –ó–ê–Ø–í–ö–ê –û–¢–†–ê–ë–û–¢–ê–ù–ê'
        await edit_text_message(callback.message, text, None)
    else:
        text = callback.message.text + '\n\n‚ùå –ó–ê–Ø–í–ö–ê –û–¢–ú–ï–ù–ï–ù–ê'
        await edit_text_message(callback.message, text, None)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)